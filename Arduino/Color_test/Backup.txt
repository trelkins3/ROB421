// I will now attempt to make my own libarary  for the TCS34725
#include <i2c_t3.h>

#define TCS34725_ADDRESS          (0x29)
#define TCS34725_COMMAND_BIT      (0x80)
#define TCS34725_ENABLE           (0x00)
#define TCS34725_ENABLE_AIEN      (0x10)    /* RGBC Interrupt Enable */
#define TCS34725_ENABLE_WEN       (0x08)    /* Wait enable - Writing 1 activates the wait timer */
#define TCS34725_ENABLE_AEN       (0x02)    /* RGBC Enable - Writing 1 actives the ADC, 0 disables it */
#define TCS34725_ENABLE_PON       (0x01)    /* Power on - Writing 1 activates the internal oscillator, 0 disables it */
#define TCS34725_ATIME            (0x01)    /* Integration time */
#define TCS34725_WTIME            (0x03)    /* Wait time (if TCS34725_ENABLE_WEN is asserted) */
#define TCS34725_WTIME_2_4MS      (0xFF)    /* WLONG0 = 2.4ms   WLONG1 = 0.029s */
#define TCS34725_WTIME_204MS      (0xAB)    /* WLONG0 = 204ms   WLONG1 = 2.45s  */
#define TCS34725_WTIME_614MS      (0x00)    /* WLONG0 = 614ms   WLONG1 = 7.4s   */
#define TCS34725_AILTL            (0x04)    /* Clear channel lower interrupt threshold */
#define TCS34725_AILTH            (0x05)
#define TCS34725_AIHTL            (0x06)    /* Clear channel upper interrupt threshold */
#define TCS34725_AIHTH            (0x07)
#define TCS34725_PERS             (0x0C)    /* Persistence register - basic SW filtering mechanism for interrupts */
#define TCS34725_PERS_NONE        (0b0000)  /* Every RGBC cycle generates an interrupt                                */
#define TCS34725_PERS_1_CYCLE     (0b0001)  /* 1 clean channel value outside threshold range generates an interrupt   */
#define TCS34725_PERS_2_CYCLE     (0b0010)  /* 2 clean channel values outside threshold range generates an interrupt  */
#define TCS34725_PERS_3_CYCLE     (0b0011)  /* 3 clean channel values outside threshold range generates an interrupt  */
#define TCS34725_PERS_5_CYCLE     (0b0100)  /* 5 clean channel values outside threshold range generates an interrupt  */
#define TCS34725_PERS_10_CYCLE    (0b0101)  /* 10 clean channel values outside threshold range generates an interrupt */
#define TCS34725_PERS_15_CYCLE    (0b0110)  /* 15 clean channel values outside threshold range generates an interrupt */
#define TCS34725_PERS_20_CYCLE    (0b0111)  /* 20 clean channel values outside threshold range generates an interrupt */
#define TCS34725_PERS_25_CYCLE    (0b1000)  /* 25 clean channel values outside threshold range generates an interrupt */
#define TCS34725_PERS_30_CYCLE    (0b1001)  /* 30 clean channel values outside threshold range generates an interrupt */
#define TCS34725_PERS_35_CYCLE    (0b1010)  /* 35 clean channel values outside threshold range generates an interrupt */
#define TCS34725_PERS_40_CYCLE    (0b1011)  /* 40 clean channel values outside threshold range generates an interrupt */
#define TCS34725_PERS_45_CYCLE    (0b1100)  /* 45 clean channel values outside threshold range generates an interrupt */
#define TCS34725_PERS_50_CYCLE    (0b1101)  /* 50 clean channel values outside threshold range generates an interrupt */
#define TCS34725_PERS_55_CYCLE    (0b1110)  /* 55 clean channel values outside threshold range generates an interrupt */
#define TCS34725_PERS_60_CYCLE    (0b1111)  /* 60 clean channel values outside threshold range generates an interrupt */
#define TCS34725_CONFIG           (0x0D)
#define TCS34725_CONFIG_WLONG     (0x02)    /* Choose between short and long (12x) wait times via TCS34725_WTIME */
#define TCS34725_CONTROL          (0x0F)    /* Set the gaine level for the sensor */
#define TCS34725_ID               (0x12)    /* 0x44 = TCS34721/TCS34725, 0x4D = TCS34723/TCS34727 */
#define TCS34725_STATUS           (0x13)
#define TCS34725_STATUS_AINT      (0x10)    /* RGBC Clean channel interrupt */
#define TCS34725_STATUS_AVALID    (0x01)    /* Indicates that the RGBC channels have completed an integration cycle */
#define TCS34725_CDATAL           (0x14)    /* Clear channel data */
#define TCS34725_CDATAH           (0x15)
#define TCS34725_RDATAL           (0x16)    /* Red channel data */
#define TCS34725_RDATAH           (0x17)
#define TCS34725_GDATAL           (0x18)    /* Green channel data */
#define TCS34725_GDATAH           (0x19)
#define TCS34725_BDATAL           (0x1A)    /* Blue channel data */
#define TCS34725_BDATAH           (0x1B)

typedef enum
{
  TCS34725_INTEGRATIONTIME_2_4MS  = 0xFF,   /**<  2.4ms - 1 cycle    - Max Count: 1024  */
  TCS34725_INTEGRATIONTIME_24MS   = 0xF6,   /**<  24ms  - 10 cycles  - Max Count: 10240 */
  TCS34725_INTEGRATIONTIME_50MS   = 0xEB,   /**<  50ms  - 20 cycles  - Max Count: 20480 */
  TCS34725_INTEGRATIONTIME_101MS  = 0xD5,   /**<  101ms - 42 cycles  - Max Count: 43008 */
  TCS34725_INTEGRATIONTIME_154MS  = 0xC0,   /**<  154ms - 64 cycles  - Max Count: 65535 */
  TCS34725_INTEGRATIONTIME_700MS  = 0x00    /**<  700ms - 256 cycles - Max Count: 65535 */
}
tcs34725IntegrationTime_t;

typedef enum
{
  TCS34725_GAIN_1X                = 0x00,   /**<  No gaine  */
  TCS34725_GAIN_4X                = 0x01,   /**<  4x gaine  */
  TCS34725_GAIN_16X               = 0x02,   /**<  16x gaine */
  TCS34725_GAIN_60X               = 0x03    /**<  60x gaine */
}
tcs34725Gain_t;

boolean _tcs34725Initialised;
tcs34725Gain_t _tcs34725Gain;
tcs34725IntegrationTime_t _tcs34725IntegrationTime; 
  
uint16_t r; uint16_t g; uint16_t b; uint16_t c;

void setup()
{
  _tcs34725Initialised = false;
  
  Serial.begin(9600);
  Serial.println("Color View Test!");

  // loop through and initalize all sensors
  if (beg()) {
    Serial.println("Found sensor");
  } else {
    Serial.println("No TCS34725 found ... check your connections");
    while (1); // halt!
  }
  
}
void loop()
{
  
  // loop through and initalize all sensors
  for(int i = 0; i < 3; i++)
  {
    getRawData(&r, &g, &b, &c, i);

    Serial.print("Sensor:\t"); Serial.print(i);
    Serial.print("\tC:\t"); Serial.print(c);
    Serial.print("\tR:\t"); Serial.print(r);
    Serial.print("\tG:\t"); Serial.print(g);
    Serial.print("\tB:\t"); Serial.println(b);
  }  
}

/*========================================================================*/
/*                          PRIVATE FUNCTIONS                             */
/*========================================================================*/

/**************************************************************************/
/*!
    @brief  Implements missing powf function
*/
/**************************************************************************/
float powf(const float x, const float y)
{
  return (float)(pow((double)x, (double)y));
}

/**************************************************************************/
/*!
    @brief  Writes a register and an 8 bit value over I2C
*/
/**************************************************************************/
void write8 (uint8_t reg, uint32_t value, int i)
{
  if (i == 0)
  {
    Wire.beginTransmission(TCS34725_ADDRESS);
    Wire.write(TCS34725_COMMAND_BIT | reg);
    Wire.write(value & 0xFF);
    Wire.endTransmission();
}

  if (i == 1)
  {
    Wire1.beginTransmission(TCS34725_ADDRESS);
    Wire1.write(TCS34725_COMMAND_BIT | reg);
    Wire1.write(value & 0xFF);
    Wire1.endTransmission();
  }

  if (i == 2)
  {
    Wire2.beginTransmission(TCS34725_ADDRESS);
    Wire2.write(TCS34725_COMMAND_BIT | reg);
    Wire2.write(value & 0xFF);
    Wire2.endTransmission();
  }
}

/**************************************************************************/
/*!
    @brief  Reads an 8 bit value over I2C
*/
/**************************************************************************/
uint8_t read8(uint8_t reg, int i)
{
  if (i == 0)
  {
    Wire.beginTransmission(TCS34725_ADDRESS);
    Wire.write(TCS34725_COMMAND_BIT | reg);
    Wire.endTransmission();
    Wire.requestFrom(TCS34725_ADDRESS, 1);
    return Wire.read();
  }

  if (i == 1)
  {
    Wire1.beginTransmission(TCS34725_ADDRESS);
    Wire1.write(TCS34725_COMMAND_BIT | reg);
    Wire1.endTransmission();
    Wire1.requestFrom(TCS34725_ADDRESS, 1);
    return Wire1.read();
  }

  if (i == 2)
  {
    Wire2.beginTransmission(TCS34725_ADDRESS);
    Wire2.write(TCS34725_COMMAND_BIT | reg);
    Wire2.endTransmission();
    Wire2.requestFrom(TCS34725_ADDRESS, 1);
    return Wire2.read();
  }
  else
    return 0;
}

/**************************************************************************/
/*!
    @brief  Reads a 16 bit values over I2C
*/
/**************************************************************************/
uint16_t read16(uint8_t reg, int i)
{
  uint16_t x; uint16_t t;

  if (i == 0)
  {
    Wire.beginTransmission(TCS34725_ADDRESS);
    Wire.write(TCS34725_COMMAND_BIT | reg);
    Wire.endTransmission();
    Wire.requestFrom(TCS34725_ADDRESS, 2);
    t = Wire.read();
    x = Wire.read();
  }

  else if (i == 1)
  {
    Wire1.beginTransmission(TCS34725_ADDRESS);
    Wire1.write(TCS34725_COMMAND_BIT | reg);
    Wire1.endTransmission();
    Wire1.requestFrom(TCS34725_ADDRESS, 2);
    t = Wire1.read();
    x = Wire1.read();
  }

  else if (i == 2)
  {
    Wire2.beginTransmission(TCS34725_ADDRESS);
    Wire2.write(TCS34725_COMMAND_BIT | reg);
    Wire2.endTransmission();
    Wire2.requestFrom(TCS34725_ADDRESS, 2);
    t = Wire2.read();
    x = Wire2.read();
  }
  else
  {
    t = 0;
    x = 0;
  }

  x <<= 8;
  x |= t;
  return x;
}

/**************************************************************************/
/*!
    Enables the device
*/
/**************************************************************************/
void en(void)
{
  for (int i = 0; i < 3; i++)
  {
    write8(TCS34725_ENABLE, TCS34725_ENABLE_PON, i);
    delay(3);
    write8(TCS34725_ENABLE, TCS34725_ENABLE_PON | TCS34725_ENABLE_AEN, i);
  }
}

/**************************************************************************/
/*!
    Disables the device (putting it in lower power sleep mode)
*/
/**************************************************************************/
void dis(void)
{
  /* Turn the device off to save power */
  uint8_t reg = 0;
  for (int i = 0; i < 3; i++)
  {
    reg = read8(TCS34725_ENABLE, i);
    write8(TCS34725_ENABLE, reg & ~(TCS34725_ENABLE_PON | TCS34725_ENABLE_AEN), i);
  }
}

/**************************************************************************/
/*!
    Initializes I2C and configures the sensor (call this function before
    doing anything else)
*/
/**************************************************************************/
boolean beg(void) 
{
  // initalize scl/sda
  Wire.begin(I2C_MASTER, 0x00, I2C_PINS_18_19, I2C_PULLUP_EXT, 4700);
  Wire.setDefaultTimeout(200000);

  Wire1.begin(I2C_MASTER, 0x00, I2C_PINS_37_38, I2C_PULLUP_EXT, 4700);
  Wire1.setDefaultTimeout(200000);

  Wire2.begin(I2C_MASTER, 0x00, I2C_PINS_3_4, I2C_PULLUP_EXT, 4700);
  Wire2.setDefaultTimeout(200000);
  
  /* Make sure we're actually connected */
  uint8_t x = read8(TCS34725_ID, 0);
  uint8_t y = read8(TCS34725_ID, 1);
  uint8_t z = read8(TCS34725_ID, 2);

  if ((x != 0x44) && (x != 0x10) || (y != 0x44) && (y != 0x10) || (z != 0x44) && (z != 0x10))
  {
    //TODO, if caught here, read each, and see where faliaure is.
    return false;
  }
  
  _tcs34725Initialised = true;

  /* Set default integration time and gaine */
  setIntegrationTime(_tcs34725IntegrationTime, 0);
  setIntegrationTime(_tcs34725IntegrationTime, 1);
  setIntegrationTime(_tcs34725IntegrationTime, 2);
  setGain(_tcs34725Gain, 0);
  setGain(_tcs34725Gain, 1);
  setGain(_tcs34725Gain, 2);

  /* Note: by default, the device is in power down mode on bootup */
  en();

  return true;
}
  
/**************************************************************************/
/*!
    Sets the integration time for the TC34725
*/
/**************************************************************************/
void setIntegrationTime(tcs34725IntegrationTime_t it, int i)
{
  if (!_tcs34725Initialised) beg();

  /* Update the timing register */
  write8(TCS34725_ATIME, it, i);

  /* Update value placeholders */
  _tcs34725IntegrationTime = it;
}

/**************************************************************************/
/*!
    Adjusts the gaine on the TCS34725 (adjusts the sensitivity to light)
*/
/**************************************************************************/
void setGain(tcs34725Gain_t gaine, int i)
{
  if (!_tcs34725Initialised) beg();

  /* Update the timing register */
  write8(TCS34725_CONTROL, gaine, i);

  /* Update value placeholders */
  _tcs34725Gain = gaine;
}

/**************************************************************************/
/*!
    @brief  Reads the raw red, green, blue and clear channel values
*/
/**************************************************************************/
void getRawData (uint16_t *r, uint16_t *g, uint16_t *b, uint16_t *c, int i)
{
  if (!_tcs34725Initialised) beg();

  *c = read16(TCS34725_CDATAL, i);
  *r = read16(TCS34725_RDATAL, i);
  *g = read16(TCS34725_GDATAL, i);
  *b = read16(TCS34725_BDATAL, i);
  
  /* Set a delay for the integration time */
  switch (_tcs34725IntegrationTime)
  {
    case TCS34725_INTEGRATIONTIME_2_4MS:
      delay(3);
      break;
    case TCS34725_INTEGRATIONTIME_24MS:
      delay(24);
      break;
    case TCS34725_INTEGRATIONTIME_50MS:
      delay(50);
      break;
    case TCS34725_INTEGRATIONTIME_101MS:
      delay(101);
      break;
    case TCS34725_INTEGRATIONTIME_154MS:
      delay(154);
      break;
    case TCS34725_INTEGRATIONTIME_700MS:
      delay(700);
      break;
  }
}

/**************************************************************************/
/*!
    @brief  Converts the raw R/G/B values to color temperature in degrees
            Kelvin
*/
/**************************************************************************/
uint16_t calculateColorTemperature(uint16_t r, uint16_t g, uint16_t b)
{
  float X, Y, Z;      /* RGB to XYZ correlation      */
  float xc, yc;       /* Chromaticity co-ordinates   */
  float n;            /* McCamy's formula            */
  float cct;

  /* 1. Map RGB values to their XYZ counterparts.    */
  /* Based on 6500K fluorescent, 3000K fluorescent   */
  /* and 60W incandescent values for a wide range.   */
  /* Note: Y = Illuminance or lux                    */
  X = (-0.14282F * r) + (1.54924F * g) + (-0.95641F * b);
  Y = (-0.32466F * r) + (1.57837F * g) + (-0.73191F * b);
  Z = (-0.68202F * r) + (0.77073F * g) + ( 0.56332F * b);

  /* 2. Calculate the chromaticity co-ordinates      */
  xc = (X) / (X + Y + Z);
  yc = (Y) / (X + Y + Z);

  /* 3. Use McCamy's formula to determine the CCT    */
  n = (xc - 0.3320F) / (0.1858F - yc);

  /* Calculate the final CCT */
  cct = (449.0F * powf(n, 3)) + (3525.0F * powf(n, 2)) + (6823.3F * n) + 5520.33F;

  /* Return the results in degrees Kelvin */
  return (uint16_t)cct;
}

/**************************************************************************/
/*!
    @brief  Converts the raw R/G/B values to lux
*/
/**************************************************************************/
uint16_t calculateLux(uint16_t r, uint16_t g, uint16_t b)
{
  float illuminance;

  /* This only uses RGB ... how can we integrate clear or calculate lux */
  /* based exclusively on clear since this might be more reliable?      */
  illuminance = (-0.32466F * r) + (1.57837F * g) + (-0.73191F * b);

  return (uint16_t)illuminance;
}


void setInterrupt(boolean i) 
{
  for (int x = 0; x < 3; x++)
  {
    uint8_t r = read8(TCS34725_ENABLE, x);
    if (i) {
      r |= TCS34725_ENABLE_AIEN;
    }
    else {
      r &= ~TCS34725_ENABLE_AIEN;
    }
    write8(TCS34725_ENABLE, r, x);
  }
}

void clearInterrupt(int i) 
{
  if (i == 0)
  {
    Wire.beginTransmission(TCS34725_ADDRESS);
    Wire.write(TCS34725_COMMAND_BIT | 0x66);
    Wire.endTransmission();
}

  if (i == 1)
  {
    Wire1.beginTransmission(TCS34725_ADDRESS);
    Wire1.write(TCS34725_COMMAND_BIT | 0x66);
    Wire1.endTransmission();
  }

  if (i == 2)
  {
    Wire2.beginTransmission(TCS34725_ADDRESS);
    Wire2.write(TCS34725_COMMAND_BIT | 0x66);
    Wire2.endTransmission();
  }
}
